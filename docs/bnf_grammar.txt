# BNF Grammar for the Functional Programming Language

This document outlines the Backus–Naur Form (BNF) grammar used to define the syntax of the functional programming language implemented in this project.

## What is BNF?

Backus–Naur Form (BNF) is a formal notation used to describe the grammar of a programming language. BNF is used to specify the syntax rules of a language in a way that is both precise and understandable. Each rule defines how a particular language construct (like an expression or a statement) can be formed.

### Key Concepts in BNF

- **Non-terminal symbols**: These are abstract concepts or categories in the language (e.g., `<expression>`, `<statement>`). They are usually enclosed in angle brackets `< >`.
- **Terminal symbols**: These are the actual symbols or literals in the language (e.g., `+`, `if`, `42`). Terminal symbols are the basic building blocks of the language.
- **Production rules**: Each rule specifies how a non-terminal symbol can be composed of other non-terminal or terminal symbols. The rules are written in the form `<non-terminal> ::= <expression>`, where `::=` means "can be replaced by."
- **Alternation**: The pipe symbol `|` is used to indicate a choice between alternatives (e.g., `<expression> ::= <literal> | <identifier>` means an `<expression>` can be either a `<literal>` or an `<identifier>`).
- **Repetition**: Rules can indicate that certain patterns can repeat (e.g., `<identifier-list> ::= <identifier> | <identifier> "," <identifier-list>` allows for a list of identifiers separated by commas).

## Understanding the BNF Grammar

Here is the BNF grammar used to define the syntax of the functional programming language implemented in this project:

This document outlines the Backus–Naur Form (BNF) grammar used to define the syntax of the functional programming language implemented in this project.

## Grammar
<program> ::= <statement> | <statement> <program>
<statement> ::= <function-def> | <expression>```markdown

<function-def> ::= "Defun" "{" "name" ":" <identifier> "," "arguments" ":" <parameters> "}" <expression>
<parameters> ::= "(" <identifier-list> ")"
<identifier-list> ::= <identifier> | <identifier> "," <identifier-list>

<expression> ::= <literal> | <identifier> | <binary-op> | <unary-op> | <function-call> | <lambda>
| <if-expression> | <comparison> | <assignment> | "(" <expression> ")"

<literal> ::= <integer> | <boolean> | <string>
<identifier> ::= <letter> <letter-digit*>
<function-call> ::= <identifier> "(" <arguments> ")"
<arguments> ::= <expression-list>
<expression-list> ::= <expression> | <expression> "," <expression-list>

<binary-op> ::= <expression> <operator> <expression>
<operator> ::= "+" | "-" | "*" | "/" | "%" | "&&" | "||" | "==" | "!=" | ">" | "<" | ">=" | "<="

<unary-op> ::= "!" <expression>

<lambda> ::= "Lambd" <identifier-list> "." <expression>

<if-expression> ::= <expression> "?" <expression> ":" <expression>

<comparison> ::= <expression> <comparison-operator> <expression>
<comparison-operator> ::= "==" | "!=" | ">" | "<" | ">=" | "<="

<assignment> ::= <identifier> "=" <expression>

<integer> ::= <digit> <digit*>
<boolean> ::= "True" | "False"
<string> ::= "'" <character*> "'"


